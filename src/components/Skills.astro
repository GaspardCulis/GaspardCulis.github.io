---

---

<div id="skills-graph"></div>
<script>
  import { Skill, root_skill } from "../content/skills";
  import ForceGraph from "force-graph";

  const nodes: { id: number; value: Skill }[] = [];
  Skill.nodes.forEach((skill, _id) => {
    nodes.push({
      id: skill.id,
      value: skill,
    });
  });

  const graph = ForceGraph();
  const screenWidth = document.body.clientWidth;
  let zoom: number;
  let size: number;
  if (screenWidth > 2000) {
    zoom = 4;
    size = 14;
  } else if (screenWidth > 1000) {
    zoom = 3;
    size = 18;
  } else {
    zoom = 2;
    size = 22;
  }

  graph(document.getElementById("skills-graph")!)
    .graphData({
      nodes,
      links: Array.from(Skill.links),
    })
    .zoom(zoom)
    .minZoom(zoom)
    .maxZoom(zoom)
    .enablePanInteraction(true)
    .nodeCanvasObject((node, ctx, globalScale) => {
      // @ts-ignore
      const value = node.value as Skill;
      const img = new Image();
      const iconUrl = value.getIconUrl();
      let textYOffset = 0;
      if (iconUrl) {
        img.src = iconUrl;
        ctx.drawImage(img, node.x! - size / 2, node.y! - size / 2, size, size);
        textYOffset += size / 2 + 4;
      }
      const label = value.name;
      const fontSize =
        (value.id === root_skill.id ? 32 : 24) / globalScale / (size / 10);
      ctx.font = `${fontSize}px Sans-Serif`;
      const textWidth = ctx.measureText(label).width;
      const bckgDimensions = [textWidth, fontSize].map(
        (n) => n + fontSize * 0.2,
      ); // some padding

      ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
      ctx.fillRect(
        node.x! - bckgDimensions[0] / 2,
        node.y! - bckgDimensions[1] / 2 + textYOffset,
        // @ts-ignore
        ...bckgDimensions,
      );

      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillStyle = "#3A4E6A";
      let neutralContent = getComputedStyle(document.body).getPropertyValue(
        "--nc",
      );
      ctx.fillText(label, node.x!, node.y! + textYOffset);
    })
    .nodePointerAreaPaint((node, color, ctx) => {
      ctx.fillStyle = color;
      ctx.fillRect(node.x! - size / 2, node.y! - size / 2, size, size); // draw square as pointer trap
    });

  setTimeout(() => {
    const rootNode = graph
      .graphData()
      .nodes.find((n) => n.id === root_skill.id)!;
    graph.centerAt(rootNode.x, rootNode.y, 1000);
  }, 500);
</script>
