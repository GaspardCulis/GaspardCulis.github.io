---
export interface Props {
  pages: { [slug: string]: string };
  leftIcon?: string;
  leftText?: string;
  rightText?: string;
  fixed?: boolean;
}

const { pages, leftIcon, leftText, rightText, fixed } = Astro.props;
---

<!-- https://flowbite.com/docs/components/navbar/#navbar-with-cta-button -->
<nav
  class={"group sticky top-0 right-0 left-0 bg-base-100 shadow-md border-gray-200 py-2.5 z-10 " +
    `${fixed ? "is-fixed lg:fixed lg:bg-transparent lg:shadow-none" : ""}`}
>
  <div
    class="flex flex-wrap items-center justify-between max-w-screen-xl px-2 lg:px-4 mx-auto"
  >
    <a href="/" class="flex items-center">
      {
        leftIcon && (
          <img
            src={leftIcon}
            width="64"
            height="64"
            class="mr-3"
            alt="Logo gites de France"
          />
        )
      }
      {
        leftText && (
          <span class="self-center text-md lg:text-xl font-semibold whitespace-nowrap text-base-content group-[.is-fixed]:group-[.is-fixed]:lg:text-white">
            {leftText}
          </span>
        )
      }
    </a>
    <div class="flex items-center lg:order-2">
      <div class="hidden mt-2 mr-4 sm:inline-block">
        <span></span>
      </div>

      {
        rightText && (
          <a
            href="#"
            class="text-accent-content bg-accent hover:bg-primary-accent focus:ring-4 focus:ring-secondary font-medium rounded-lg text-sm px-4 lg:px-5 py-2 lg:py-2.5 sm:mr-2 lg:mr-0"
          >
            {rightText}
          </a>
        )
      }
      <button
        data-collapse-toggle="mobile-menu-2"
        type="button"
        class="inline-flex items-center p-2 ml-1 text-sm text-base-content rounded-lg lg:hidden hover:bg-base-300 focus:outline-none focus:ring-2 focus:ring-base-200"
        aria-controls="mobile-menu-2"
        aria-expanded="false"
      >
        <span class="sr-only">Open main menu</span>
        <svg
          class="w-6 h-6"
          fill="currentColor"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
            clip-rule="evenodd"></path>
        </svg>
        <svg
          class="hidden w-6 h-6"
          fill="currentColor"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
            clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>
    <div
      class="hidden items-center justify-between w-full lg:flex lg:w-auto lg:order-1"
      id="mobile-menu-2"
    >
      <ul
        class="flex flex-col mt-4 font-medium lg:flex-row lg:space-x-8 lg:mt-0"
      >
        {
          Object.entries(pages).map((page) => (
            <li>
              <a
                href={`/${page[0]}`}
                class={`block py-2 px-4 text-base-content rounded lg:rounded-xl lg:text-lg hover:bg-base-200 ${
                  `${page[0]}` === Astro.url.pathname.split("/")[1]
                    ? "text-primary"
                    : ""
                }`}
                aria-current="page"
              >
                {page[1]}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</nav>

<script>
  document.querySelectorAll("[data-collapse-toggle]").forEach((e) => {
    const htmlElement = e as HTMLElement;
    htmlElement.addEventListener("click", () => {
      const targetId = (e as HTMLElement).dataset.collapseToggle;
      const target = document.querySelector(`#${targetId}`);
      if (target) {
        const isExpanded = htmlElement.getAttribute("aria-expanded") === "true";
        if (isExpanded) {
          target.classList.add("hidden");
          htmlElement.setAttribute("aria-expanded", "false");
        } else {
          target.classList.remove("hidden");
          htmlElement.setAttribute("aria-expanded", "true");
        }
      } else {
        console.warn("Could not find target: #" + targetId);
      }
    });
  });

  const navbar = document.querySelector("nav.is-fixed") as HTMLElement;
  if (navbar) {
    window.addEventListener("scroll", (_) => {
      if (document.documentElement.scrollTop > navbar.clientHeight) {
        navbar.classList.replace("lg:bg-transparent", "lg:bg-base-100");
        navbar.classList.remove("lg:shadow-none");
        navbar.classList.remove("is-fixed");
      } else {
        navbar.classList.replace("lg:bg-base-100", "lg:bg-transparent");
        navbar.classList.add("lg:shadow-none");
        navbar.classList.add("is-fixed");
      }
    });
  }
</script>
