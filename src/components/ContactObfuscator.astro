---
// https://andrewlock.net/simple-obfuscation-of-email-addresses-using-javascript/
export interface Props {
  href: string;
  innerTextIsHref?: boolean;
  class?: string;
}

const props = Astro.props;

function encodeEmail(email: string, key: number): string {
  // Convert key to 2-digit hex
  const keyHex = key.toString(16).padStart(2, "0");
  let result = keyHex;

  for (let i = 0; i < email.length; i++) {
    const charCode = email.charCodeAt(i);
    const encoded = (charCode ^ key).toString(16).padStart(2, "0");
    result += encoded;
  }

  return result;
}
---

<a
  href="#"
  class:list={[
    "cntc-obf",
    { "inner-text-is-href": props.innerTextIsHref },
    props.class,
  ]}
  style="color: inherit"
  data-email={encodeEmail(props.href, 69)}
>
  {props.innerTextIsHref ? "Please enable JavaScript" : <slot />}
</a>

<script>
  function decodeEmail(encoded: string): string {
    // Extract key from first 2 chars
    const key = parseInt(encoded.substring(0, 2), 16);
    let email = "";

    // Process remaining chars in pairs
    for (let i = 2; i < encoded.length; i += 2) {
      const hexPair = encoded.substring(i, i + 2);
      const charCode = parseInt(hexPair, 16) ^ key;
      email += String.fromCharCode(charCode);
    }

    return email;
  }

  document.querySelectorAll(".cntc-obf").forEach((el) => {
    const encoded = (el as HTMLElement).dataset.email;
    const decoded = decodeEmail(encoded!);
    const innerTextIsHref = el.classList.contains("inner-text-is-href");

    (el as HTMLLinkElement).href = decoded;
    if (innerTextIsHref) {
      el.textContent = decoded.replace(/^(mailto:|tel:)/, "");
    }
  });
</script>
